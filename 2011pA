#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define vec vector
using pii = pair<int, int>;
using ll = long long;
#define eb emplace_back
#define al(x) x.begin(), x.end()
double fcmp(double a, double b, double eps = 1e-9) {
    if (fabs(a-b) < eps) return 0;
    return (a > b)*2-1;
}
const int INF = 0x3f3f3f3f;
const ll llINF = 1e18;
struct pt{

    double x,y;

    pt(){}
    pt(double x,double y): x(x),y(y) {}
    
    pt operator+(pt src){
        return pt(x+src.x,y+src.y);
    }

    pt operator-(pt src){
        return pt(x-src.x,y-src.y);
    }

    double operator*(pt src){//dot product
        return x*src.x + y*src.y;
    }

    pt operator*(double src){
        return pt(x*src,y*src);
    }        

    double operator^(pt src){//cross
        return x*src.y-y*src.x;
    }

    bool operator==(pt src){
        return(x==src.x && y==src.y);
    }

};
struct line{
    pt sp,ep;

    line(){}
    line(pt sp,pt ep): sp(sp),ep(ep) {}

    double cp(pt src){
        return (ep-sp) ^ (src-sp);//cross product
    }

};


ll a,m,p,q,r,s;

bool inborder(ll a, ll lo, ll hi){
    return (a >= lo && a <= hi);
}

bool ucheck(ll base, ll bd, ll times){//q * m^times

    while(times--){
        base *= m;
        if(base > bd) return false;
    }

    if(base > bd) return false;

    return 1;
}

ll llpow(ll aa,ll bb){
    ll ans = 1;

    do{
        if(bb & 1) ans *= aa;//odd
        aa *= aa;
    }while(bb = bb >> 1);

    return ans;
}

ll llsum(vec<pair<string, ll>>aa, vec<pair<string, ll>> bb){
    ll sa=0,sb=0;
    for(auto i:aa){
        sa += i.second;
    }
    for(auto i:bb){
        sb += i.second;
    }
    return sa - sb;
}
int main(){
    int kase=0;

    while(cin >> a >> m >> p >> q >> r >> s){

        if(!a && !m) break;
        kase++;

        if(inborder(p,r,s) && inborder(q,r,s)){
            cout << "Case " << kase << ": empty" << endl;
            continue;
        }

        if(m == 1){//aaaaaa
            if(p >= r) cout << "Case " << kase << ": impossible" << endl;
            else if (q + (r - p + a - 1 ) /a *a > s) cout << "Case " << kase << ": impossible" << endl;
            // /a*a : least add amount  ===> 7/3*3 = 6
            else cout << "Case " << kase << ": " << (r-p+a-1) / a << "A" << endl;
        }
        else{
            vec<pair<string,ll>>ans,tmp;
            ans.eb("",llINF);

            for(int i=0;i<=40;i++){//how many M

                if(!ucheck(q , s , i))break;
                
                ll pp = p * llpow(m,i);//lower bound
                ll qq = q * llpow(m,i);//upper bound

                vec<int> v(i+1);//As

                if(qq - pp > s - r) continue;

                else if(!(inborder(pp , r , s) && inborder(qq , r , s))){

                    ll smaller = min(r-pp, s-qq);
                    ll bigger = max(r-pp, s-qq);

                    for(int j=i;j>=0;j--){//a between m

                        v[j] = (smaller + (llpow(m,j) * a) - 1) / (llpow(m,j) * a);

                        if(v[j] * llpow(m,j) * a <= bigger){
                            bigger -= v[j] * llpow(m,j) * a;
                            smaller -= v[j] * llpow(m,j) * a;
                            break;
                        } 

                        else{
                            v[j]--;
                            bigger -= v[j] * llpow(m,j) * a;
                            smaller -= v[j] * llpow(m,j) * a;
                        }
                    }
                    if(smaller > 0) continue;
                }

                tmp.clear();

                for(int j=i;j>=0;j--){

                    if(j == i && v[j]==0) tmp.eb("M",1);

                    else if(v[j] == 0){
                        if(j != 0)tmp.back().second++;
                    }

                    else{
                        tmp.eb("A",v[j]);
                        if(j!=0)tmp.eb("M",1);
                    }

                }

                if(llsum(tmp,ans) <= 0){//min length->lexicographically
                    int cnt = 0;

                    if(llsum(tmp,ans) == 0){
                        while(tmp[cnt] == ans[cnt]) cnt++;
                    }
              //      cout << "tmp: " <<tmp.size()<<endl; 

                    if(llsum(tmp,ans) < 0 || tmp[cnt] < ans[cnt]){
                        ans = tmp;
                    }
                }
            }

            if(ans[0].second != llINF){
                cout << "Case " << kase << ":";
                for(auto k:ans)
                   cout << " "<<k.second<<k.first;
                cout << endl;
            }
            else{
                cout  << "Case " << kase << ": impossible" << endl;
            }
            
        }

    }
}
