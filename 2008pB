#include<bits/stdc++.h>
using namespace std;
#define ll long long
//F(x) is integer forall x = 1ï½žk+1 <-> F(x) is integer forall x in N
//<->F(1) is integer & F'(x) = F(x+1) - F(x) is integer forall x in N

string str;
vector<pair<int,int>> poly;//coe,power
int denom=0;
int maxp;

void getpoly(){//an^x
    int cpd=0;//0:coe,,1:power,,2:denominator
    int a=0;
    int x=0;
    int sign = 1;
    maxp = 0;
    denom = 0;
 
    for(int i=1;i<str.length();i++){
        if(isdigit(str[i])){
            if (cpd == 0){//coe
                a = a*10 + str[i] - '0';
            }
            else if (cpd == 1){//power
                x = x*10 + str[i] - '0';
                maxp = max(x,maxp);
            }
            else if (cpd == 2){
                denom = denom*10 + str[i] - '0';
            }
        }
        else if(str[i] == 'n'){
            cpd = 1;//power item
        }
        else if(str[i] == '/'){
            cpd = 2;//denom item
        }


        //when meet +-),put the item in the vec
        else if(str[i] == '+' || str[i] == '-' || str[i] == ')'){

            if(cpd == 1 || cpd == 2)
            {
                if(a == 0)//coe = 1
                    a = 1;

                if(x == 0)//n^1
                    x = 1;
            }


            poly.emplace_back(make_pair(a*sign,x));
            
            if(str[i] == '-'){
                sign = -1;
            }
            else if (str[i] == '+'){
                sign = 1;
            }
            cpd = 0;//coe term
            a = 0;
            x = 0;
        }
    }
}

ll fast_pow(ll x ,ll k)//x^k
{ 
	ll ans = 1;
    ll base = x;
    ll pow = k;
   
    while(pow != 0)//3^8 -> 9^4 -> 81^2 -> ...^1-> ans%denom OK
    {
        
		int res = pow % 2;
        if(res == 1)
        {
            ans = (ans%denom)*(base%denom);
            ans %= denom;
        }

        base = (base%denom)*(base%denom);
        base = base % denom;
        
		pow /= 2;
    }

    return ans;
}


bool check(){
    long long polyans ;
    for(int i=1;i<=maxp+1;i++){
        polyans = 0;
        for(auto x:poly){
            polyans += (x.first%denom) * (fast_pow(i ,x.second) % denom);
            polyans %= denom;
        }
        if(polyans % denom) return false;
    }
    return true;

}
int main(){
    int kase=0;
    while(1){
    	cin >> str;
        if(str == ".") break;
        poly.clear();
        getpoly();
        bool flag = check();


        kase++;
        if(flag == true){
            cout << "Case " << kase << ": Always an integer" << endl;
        }
        else{
            cout << "Case " << kase << ": Not always an integer" << endl;
        }
    }
    return 0;
}
