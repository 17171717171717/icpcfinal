#include <bits/stdc++.h>
using namespace std;
using ll = long long;
template<typename T> using p = pair<T, T>;
template<typename T> using vec = vector<T>;
template<typename T> using deq = deque<T>;
#define yccc ios_base::sync_with_stdio(false), cin.tie(0)
#define endl '\n'
#define al(a) a.begin(),a.end()
#define F first
#define S second
#define eb emplace_back
using pii = pair<int,int>;//time,people,sort time then sort people

multiset<int> ans;
vec<pii> work;
vec<pii> room;

int main(){
    int n,p,t,kase=0;
    while (cin >> n){
        if (n==0) break;
        //init+input
        int anscnt = n;
        int ansvalue = 0;
        work.clear();
        room.clear();
        ans.clear();
        for(int i=0;i<n;i++){
            cin >> p >> t;
            work.emplace_back(make_pair(t,p));
            ansvalue += p;
        }
        int b;
        cin >> b;
        for(int i=0;i<b;i++){
            cin >> p;
            int t1,t2,timing;
            scanf("%d:%d",&t1,&t2);
            timing = t1 * 60 + t2 - 14*60;
            room.emplace_back(make_pair(timing,p));
        }
        
        //greedy algo
        
        sort(work.begin(),work.end());
        sort(room.begin(),room.end());
        int works=0;
        for(int i=0;i<room.size();i++){
            for(works;works<work.size();works++){
                if(work[works].first > room[i].first )break;
                ans.insert(work[works].second);
            }
            if (ans.empty()) continue;
            auto it =ans.upper_bound(room[i].second);//min workshop people > room[i] capacity ,,, only workshops in set
            if(it == ans.begin()) continue;
            it--;
            anscnt--;
            ansvalue = ansvalue - *it;
            ans.erase(it);
        }


        kase++;
        cout <<"Trial "<<kase <<": "<<anscnt <<" "<<ansvalue <<endl << endl;
    }
}
