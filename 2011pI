    #include<bits/stdc++.h>
    using namespace std;
    #define F first
    #define S second
    #define vec vector
    using pii = pair<int, int>;
    using ll = long long;
    #define eb emplace_back
    #define al(x) x.begin(), x.end()
    double fcmp(double a, double b, double eps = 1e-9) {
        if (fabs(a-b) < eps) return 0;
        return (a > b)*2-1;
    }
    const int INF = 0x3f3f3f3f;
    double pi = acos(-1);

    struct segt{
        int n;
        vec<int>st,tag;

        segt(){ }
        segt(int n): n(n){
            st.resize(4*n);
            tag.resize(4*n);
        }

        void pull(int id){
            st[id] = min(st[id*2],st[id*2+1]);
        }

        void push(int id){
            st[id*2] += tag[id];
            st[id*2+1] += tag[id];
            
            tag[id*2] += tag[id];
            tag[id*2+1] += tag[id];
            
            tag[id]  = 0;
        }

        void modify(int ql,int qr,int L,int R, int id,int val){
            if(L <= ql && qr <= R){
                st[id] += val;
                tag[id] += val;
                return;
            }
            else if(qr < L || ql > R){
                return ;
            }

            int m = (ql+qr)/2;
            push(id);

            modify(ql,m,L,R,id*2,val);
            modify(m+1,qr,L,R,id*2+1,val);
            pull(id);
        }

        bool query(int ql,int qr,int L,int R,int id){
            if(L <= ql && qr <= R){
                return st[id] == 0;
            }
            else if (qr < L || ql > R){
                return 0;
            }

            push(id);

            int m = (ql+qr)/2;
            return query(ql,m,L,R,id*2) || query(m+1,qr,L,R,id*2+1);
        } 
    };

    struct ep{
        int type;
        int ylo,yhi;
        int x;
        ep(){}
        ep(int type,int ylo, int yhi,int x):type(type), ylo(ylo),yhi(yhi),x(x){}

        bool operator<(ep src){
            if(src.x != x){
                return x < src.x;
            }
            return type < src.type;
        }
    };

    bool solve(vec<pii>m,int r){
        int n = 2000005, o = 1000001;
        segt st(n);
        vec<ep> es;

        for(int i=0; i<m.size(); i++){
            es.eb(1 , m[i].S-r , m[i].S+r , m[i].F - r );
            es.eb(4 , m[i].S-r , m[i].S+r , m[i].F + r );
        }
        //3:human in 2:humman out 1:mummy in 4:mummy out
        es.eb(3,-r,r,-r);
        es.eb(2,-r,r,r);

        sort(al(es));

        int prev = -INF;
        bool muming = false;

        for(auto i : es){
            if(i.x != prev+1 and muming)
                if(st.query(0,n-1,-r+o,r+o,1))
                    return true;

            switch(i.type){
                case 1:
                    st.modify(0,n-1,i.ylo+o , i.yhi+o , 1 , 1 );
                    if(muming){
                        if(st.query(0,n-1,-r+o,r+o,1))
                            return true;
                    }
                    break;
                
                case 4:
                    if(muming){
                        if(st.query(0,n-1,-r+o,r+o,1))
                            return true;
                    }
                    st.modify(0, n-1, i.ylo+o, i.yhi+o, 1, -1);
                    break; 

                case 2:
                case 3:
                    if(st.query(0,n-1,-r+o,r+o,1))
                        return true;
                    
                    muming = !muming;
                    break;
            }

            prev = i.x;
        }

        return false;


    }
    int main()
    {

        
        int n, c = 1;
        while (cin >> n) {
            if (n == -1) break;
            
            vec<pii> _list(n);
            for (int i=0;i<n;i++)
                cin >> _list[i].F >> _list[i].S;
                
            int L = 1, R = 1000001, ans;
            while (L <= R) {
                int M = (L+R) / 2;
                
                if (solve(_list, M)) {
                    ans = M;
                    L = M+1;
                } else {
                    R = M-1;
                }
            }
            
            cout << "Case " << c++ << ": " << (ans >= 1000000 ? "never" : to_string(ans+1)) << endl;
        }
    }
    /*int main(){
        int n,kase = 0;
        while(cin >> n){
            if(n==-1)break;
            vec<pii>mmums(n);
            kase++;

            for(int i=0;i<n;i++){
                cin>>mmums[i].F>>mmums[i].S;
            }

            int L=1;
            int R=1000001;
            int ans;

            while (L <= R) {
                int M = (L+R) / 2;
                cout << "M: " << " " << M << endl;
                if (solve(mmums,M)) {
                    ans = M;
                    L = M+1;
                } else {
                    R = M-1;
                }
            }
            cout << "Case " << kase << ": " << (ans >= 1000000 ? "never" : to_string(ans+1)) << endl;
        }

    }*/
