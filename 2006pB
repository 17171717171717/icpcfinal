#include<bits/stdc++.h>
using namespace std;
#define al(a) a.begin(),a.end()
#define ll long long
#define eb emplace_back
const ll costINF = 10000000;
const ll capINF = 2000000000;//augmenting can't go back
const ll distINF = 2000000000;

int P,I;
//edge,graph,edges
//last node,next node,capacity,cost<capa
struct edge{
    int f,t;
    ll cap;
    ll cost;
    edge(){
        f = t = cap = cost = 0;
    }

    edge(int f,int t, ll cap, ll cost):f(f),t(t),cap(cap),cost(cost){}
};
vector<vector<int>>G;
vector<edge> E;
vector<ll> dis;
vector<bool> inq;
vector<int> pre;

void init(){
        G.clear();
        G.resize(2+P+I);
        E.clear();
        dis.clear();
        dis.resize(2+P+I);
        inq.clear();
        inq.resize(2+P+I);
        pre.clear();
        pre.resize(2+P+I);
}


//edgeid,add edge
//back
void addedge(int f,int t, ll cap, ll cost){
    G[f].emplace_back(E.size());//eid
    E.emplace_back(f,t,cap,cost);
    G[t].emplace_back(E.size());
    E.eb(t,f,0,-cost);//-w(u,v)
}

//bellman+mcmf


pair<ll,ll>bellman(int src,int tgt){//mcmf:SPFA
    fill(al(dis),distINF);
    fill(al(inq),false);
    fill(al(pre) ,-1);

    dis[src] = 0;
    queue<int> q;
    q.push(src);
    inq[src] = true;//visited
    int f,t;
    ll cap,cost;
    //relax
    while(!q.empty()){//SPFA
        int cur = q.front();
        q.pop();
        inq[cur] = true;
        for(int &nxt : G[cur]){
            f = E[nxt].f ,t = E[nxt].t ,cost = E[nxt].cost ,cap = E[nxt].cap;

            if(cap<=0) continue;

            if(dis[t]>dis[f] + cost){
                dis[t] = dis[f] + cost;
                pre[t] = nxt;
                if(inq[t] == false){//need go to Q
                    q.push(t);
                    inq[t] = true;// true:haven't relaxed
                }
            }
        }
    }

    if(pre[tgt]== -1) return{0,0};//no augmenting

    int _tgt=tgt;
    ll flow = capINF;
    ll totalcost = 0;
    int eid;

    while(_tgt != src){
        eid = pre[_tgt];//前面那格
        flow = min(flow,E[eid].cap);//取最小的cap
        totalcost += E[eid].cost;//只有p i中間有cost
        _tgt = E[eid].f;//往前走
    }

    _tgt = tgt;

    while(_tgt != src)//capacity adjust
    {
        eid = pre[_tgt];
        E[eid].cap -= flow;
        E[eid ^ 1].cap += flow;//01 change , 23 change.......
        _tgt = E[eid].f;
    }

    return{totalcost * flow,flow};
}

pair<ll,ll> mcmf(int src,int tar){//cost*flow,flow
    ll cf=0,flow=0;
    ll nowcf,nowflow;
    while(1){
        tie(nowcf,nowflow) = bellman(src,tar);
        if(nowcf == 0 ) break;
        cf += nowcf;
        flow += nowflow;
    }

    return{cf,flow};
}




int main(){
    int kase=0;
    while(cin >> P >> I){
        if(P==0 && I==0) break;

        init();

        //input
        int source=0,target=P+I+1;
        ll cap;

        for(int i=0;i<P;i++){
            cin >> cap;
            addedge(source,i+1,cap,0);
        }
        for(int i=0;i<I;i++){
            cin >> cap;
            addedge(P+1+i,target,cap,0);
        }

        double cost;
        for(int i=1;i<=P;i++){
                for(int j=0;j<I;j++){
                    cin >> cost;
                    ll intcost = (ll) round(cost*100.0);
                    if(intcost == -100) continue;//no need to add this edge
                    addedge(i,1+P+j,capINF,intcost);

                }
        }
        /* for(auto & i : E)
            cout << i.f << " " << i.t << " " << i.cap << " " << i.cost << endl;
        cout << "-----" << endl;*/

        //algo

        vector<edge> backE=E;

        pair<ll,ll>rawans;
        rawans = mcmf(source,target);

        double minans = rawans.first / 100.0;
        E = backE;

        for(auto &edge_:E){
            if(edge_.cost == 0){//st to ice or pie to terminal

                if(edge_.f == 0){//0是頭，加一個大數
                    edge_.cost = costINF;
                }
                else if(edge_.t == 0){//0 is tail,cost negative
                    edge_.cost = -costINF;
                }
                else if(edge_.t == 1+P+I){//target 是 terminal
                    edge_.cost = costINF;
                }
                else if(edge_.f == 1+P+I){//nega above
                    edge_.cost = -costINF;
                }
                continue;
            }
            if(edge_.cost > 0)
                edge_.cost = costINF - edge_.cost;//大數-COST
            else
                edge_.cost = -costINF - edge_.cost;///edgecost<0,-costinf + |edgecost|
        }
        rawans = mcmf(source,target);
        double maxans = (3*costINF*rawans.second - rawans.first) / 100.0;//3 big number
        kase++;
        cout << "Problem " << kase << ": " << fixed << setprecision(2)<< minans << " to " << maxans << endl;
    }
    return 0;
}
