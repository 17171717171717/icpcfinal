#include<bits/stdc++.h>
using namespace std;
#define F first
#define S second
#define vec vector
using pii = pair<int, int>;
using ll = long long;
#define eb emplace_back
#define al(x) x.begin(), x.end()
double fcmp(double a, double b, double eps ) {
    if (fabs(a-b) < eps) return 1;
    return 0;
}
const int INF = 0x3f3f3f3f;
const double pi = acos(-1);
struct pt{

    double x,y;

    pt(){}
    pt(double x,double y): x(x),y(y) {}
    
    pt operator+(pt src){
        return pt(x+src.x,y+src.y);
    }

    pt operator-(pt src){
        return pt(x-src.x,y-src.y);
    }

    double operator*(pt src){//dot product
        return x*src.x + y*src.y;
    }

    pt operator*(double src){
        return pt(x*src,y*src);
    }        

    double operator^(pt src){//cross
        return x*src.y-y*src.x;
    }

    bool operator==(pt src){
        return(x==src.x && y==src.y);
    }

};

struct line{
    pt sp,ep;

    line(){}
    line(pt sp,pt ep): sp(sp),ep(ep) {}

    double cp(pt src){
        return (ep-sp) ^ (src-sp);//cross product
    }

};
double integral(double low ,double high,double v[], int k)
{
    double ans;
    double l=0,r=0;
    for(int i=1;i<=2*k+1;i++){
        l += v[i]*pow(low,i);
        r += v[i]*pow(high,i);
    }
    ans = r - l;
    return ans;


}
int main(){
    int n,kase=0;
    while(cin >> n){
            double poly[23];
            double inte[23];
            double xlow,xhigh,vol,inc;
            for(int i=0;i<=22;i++){
                poly[i]=0;
                inte[i]=0;
            }
            kase++;

            for(int i=0;i<=n;i++){
                cin >> poly[i];
            }

            cin >> xlow >> xhigh >> inc;

            for(int i=0;i<=n;i++){
                for(int j=0;j<=n;j++){
                    //(x^2+x+1)^2 -> 1 1+1 1+1+1 1+1 1
                    inte[i+j] += poly[i]*poly[j];//f(x)^2
                }
            }
            //x^k => x^2k => x^(2k+1) ===> 2*n+1
            for(int i=2*n+1;i>=1;i--){
                //x^2+2x+1 -> 1/3 x^3 + x^2 + x 
                inte[i] = inte[i-1]/i;//integral
            }
            inte[0] = 0;

            for(int i=2*n+1 ; i>=1 ; i--){
                inte[i] *= pi;
            }

            double ansvol=0,tmp1=0,tmp2=0;
            for(int i=1;i<=2*n+1;i++){
                tmp1 += inte[i] * pow(xlow,i);
                tmp2 += inte[i] * pow(xhigh,i);
            }
            ansvol += tmp2 - tmp1;
        cout << "Case " <<kase << ": " << fixed << setprecision(2) <<  ansvol << endl;
        
        if(ansvol < inc){
            cout << "insufficient volume" << endl;
        }
        else{
            vector<double>ans;
            double l = xlow;
            double r = xhigh;
            for(int i=0;i<8;i++){
                double tmpvol;
                /*
                for(int i=1;i<=2*n+1;i++){
                tmp1 += inte[i] * pow(l,i);
                tmp2 += inte[i] * pow(r,i);
                }
                tmpvol = tmp1 - tmp2;*/
                tmpvol = integral(l,r,inte,n);
                if(tmpvol < inc) break;

                double ll=l,rr=r;
                double mid;
                while(1){
                    mid = (ll+rr)/2;
                    tmpvol = integral(l,mid,inte,n);
                    if(fcmp(tmpvol,inc,1e-6)){
                        ans.eb(mid);
                        break;
                    }
                    else if(tmpvol > inc){
                        rr = mid;
                    }
                    else{
                        ll = mid;
                    }
                }
                l = mid;
                r = xhigh;

            }

            if(ans.size() >= 2){
                for(int i=0;i<=ans.size()-2;i++){
                    cout << ans[i] - xlow << " ";
                }
            }
            cout << ans[ans.size()-1] - xlow << endl;
        }
    }
}


